name: Build and Push Docker Image
on:
  push:
    branches:
      - ops/cd-test
jobs:
  CI:
    uses: ./.github/workflows/sms_backend_ci.yml
    secrets: inherit     

  CD:
    needs: CI
    environment: production
    runs-on: ubuntu-latest
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: SMS-Backend-CD Discord Notification
      uses: sarisia/actions-status-discord@v1
      if: ${{ success() }}
      with:
        title: ✅ SMS-Backend-CD 성공! ✅
        webhook: ${{ secrets.SMS_DISCORD_WEBHOOK }}
        color: 00FF00

    - name: SMS-Backend-CD Discord Notification
      uses: sarisia/actions-status-discord@v1
      if: ${{ failure() }}
      with:
        title: ❗️ SMS-Backend-CD 실패! ❗️
        webhook: ${{ secrets.SMS_DISCORD_WEBHOOK }}
        color: FF0000
